<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Blogstein]]></title>
  <link href="http://bookstein.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://bookstein.github.io/"/>
  <updated>2017-01-28T18:10:36-08:00</updated>
  <id>http://bookstein.github.io/</id>
  <author>
    <name><![CDATA[Emily Bookstein]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing an Express Server]]></title>
    <link href="http://bookstein.github.io/blog/2017/01/28/testing-an-express-server/"/>
    <updated>2017-01-28T17:41:40-08:00</updated>
    <id>http://bookstein.github.io/blog/2017/01/28/testing-an-express-server</id>
    <content type="html"><![CDATA[<p>A couple weeks ago, I wrote a suite of tests for a new Node-Express service.</p>

<p>Up until that point, all the JS testing I&rsquo;d done was for <a href="https://bookstein.github.io/blog/2016/12/20/if-i-only-had-a-test/">React components</a>. Writing tests for an Express app is a little different, but was actually really fun and easy with the right tools. So here&rsquo;s a little write-up on some testing tools and tips for backend Javascript!</p>

<h3>Tools</h3>

<p>You will need one or more of the following tools:</p>

<ul>
<li><a href="https://mochajs.org/">Mocha</a>: a test runner. In package.json, simply add <code>"test": "mocha"</code> under &ldquo;scripts&rdquo; and all tests in the <code>test</code> directory will run.</li>
<li><a href="chaijs.com/">Chai</a>: an assertions library for Javascript, offering both an expect API and an assert API.</li>
<li><a href="https://github.com/visionmedia/supertest">Supertest</a>: an HTTP testing library that lets you easily send HTTP requests to a local server.</li>
<li><a href="www.node-tap.org/">Node-tap</a>: a test library implementing the Test-Anything-Protocol for Node.</li>
</ul>


<h3>Most Valuable Player: Supertest</h3>

<p>My favorite new tool on this list is the Supertest library. It is SO easy to hit each Express endpoint with a Supertest request and examine the response.</p>

<p>The way it works: require Supertest and pass it an Express application. This returns a supertest object onto which other methods can be chained. For example, you can set attributes with &ldquo;get(&lsquo;/path&rsquo;)&rdquo; or &ldquo;set(&lsquo;Content-Type&rsquo;, &lsquo;application/json&rsquo;)&rdquo; that modify both the object and your eventual request to the server. Expectations for the response are also chained onto the supertest object.</p>

<p>With mocha/chai/supertest:
<code>javascript
const request = require(‘supertest’)
const app = require('../app')
it('gets a 200 response', function (done) {
        request(app) // this returns a SuperTest object
        .get(‘/data’)
        .set('Content-Type', 'application/json')
        .expect(200)
        .end(done)
})
</code></p>

<h3>Asynchronicity</h3>

<p>One interesting aspect of writing tests for an Express server is the fact that your tests must run asynchronously. After all, you&rsquo;re sending a request to your server; if your tests proceeded onwards full steam ahead, you might run into an expectation that checks for a response before the response has even arrived. Mocha also needs wait for the current test to finish before heading off to other tests.</p>

<p>Mocha has two ways of handling asynchronous tests:</p>

<ul>
<li>pass in a <code>done</code> callback that is called when the test ends, or</li>
<li>use Mocha&rsquo;s built-in Promise handling.</li>
</ul>


<p>Now that Mocha actually handles Promises in-house, it&rsquo;s considered better practice to use <code>.then</code> and <code>.catch</code> rather than <code>.end(done)</code>.</p>

<p>With mocha/supertest:
<code>javascript
const request = require(‘supertest’)
const app = require('../app')
it('gets a 200 response', function () {
        request(app)
        .get(‘/data’)
        .then((res) =&gt; {
           if (!(res.status === 200)) { throw new Error } // make sure to actually throw an error so the test fails
        })
        .catch(err =&gt; {throw err})
})
</code></p>

<p>Node-tap can also be used this way, with <code>.then</code> and <code>.catch</code> callbacks on a Promise.</p>

<p>node-tap/supertest:
<code>javascript
const request = require(‘supertest’)
const test = require('tap').test
const app = require('../app')
test(‘gets a 200 response', (t) =&gt; {
  t.plan(1)
  request(app)
    .get(‘/data')
    .then((res) =&gt; {
      t.equal(res.status, 200)
    })
    .catch((err) =&gt; {
      t.fail(err)
    })
})
</code></p>

<p>Now sit back, relax, and watch your tests run.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Express is adorbs]]></title>
    <link href="http://bookstein.github.io/blog/2017/01/04/express-is-adorbs/"/>
    <updated>2017-01-04T21:29:15-08:00</updated>
    <id>http://bookstein.github.io/blog/2017/01/04/express-is-adorbs</id>
    <content type="html"><![CDATA[<p>Express is adorable. It&rsquo;s the tiniest, cutest little web framework.</p>

<p>Besides <em>adorable</em>, <a href="http://expressjs.com/">Express</a> is a lightweight web framework for Node.js. It addresses a few basic needs of Node applications.</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> Node        </th>
<th style="text-align:right;"> Express         </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> need to implement whole HTTP server      </td>
<td style="text-align:right;"> convenience methods for easy-to-start server </td>
</tr>
<tr>
<td style="text-align:left;"> need a router to map requests to request handlers      </td>
<td style="text-align:right;"> routes requests to designated handler based on HTTP verb + path     </td>
</tr>
<tr>
<td style="text-align:left;"> need to actually handle requests </td>
<td style="text-align:right;"> callbacks handle requests!      </td>
</tr>
</tbody>
</table>


<h3>Hello world</h3>

<p>A &ldquo;hello world&rdquo; Express server is very simple. Besides the standard <code>package.json</code> + <code>node_modules</code> (libraries) that come with a new Node project, here&rsquo;s all it took:</p>

<p><code>$ npm install express --save</code></p>

<pre><code class="javascript">// app.js

var express = require('express')
var app = express() // creates an Express application

// `app` has methods like `.get` for routing HTTP requests
app.get('/', (req, res) =&gt; {
  var host = req.get('host') // `req` is an object representing the HTTP request
  res.send("try visiting " + host + "/helloworld instead")
})

app.get('/helloworld', (req, res) =&gt; {
  // `res` is an object representing the HTTP response
  res.send("hello world")
})

// `.listen` is a convenience function that does some stuff to start an HTTP server
app.listen(3000, function () {
  console.log('Example app listening on port 3000!')
})
</code></pre>

<p>That&rsquo;s all there is to it. Run <code>node app.js</code> on the command line, open up <a href="">localhost:3000</a> in a browser, and you&rsquo;re all set.</p>

<h3>Bonus fun</h3>

<p><code>res</code> and <code>req</code> (the arguments passed into each callback) are pretty powerful objects. Built on Node&rsquo;s own response and request objects, these objects come with helpful methods to read the request or alter the response body.</p>

<p>For example, you can have the response <a href="https://expressjs.com/en/4x/api.html#res.json">send back JSON</a> instead of a regular String:</p>

<pre><code class="javascript">app.get('/json', (req, res) =&gt; {
  res.json({ msg: 'this is json' });
})
</code></pre>

<p>I really like the simple route layout that Express encourages. Each route is a simple combination of HTTP verb + path. (A REST best practice, incidentally: keep the URL the same but vary the verb.)</p>

<p>In the following example, when we load and submit an HTML form, we hit two different <code>/upload</code> endpoints.</p>

<pre><code class="javascript">app.get('/upload', (req, res) =&gt; {
  const form = `
    &lt;form action='/upload' method='post'&gt;
      Submit this form
      &lt;input type='submit' /&gt;
    &lt;/form&gt;
  `
  res.send(form)
})

app.post('/upload', (req, res) =&gt; {
  res.send('hello! upload complete')
})
</code></pre>

<p>Hello, World (of Express)!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 Handy Spells for the Aspiring ES6 Wizard]]></title>
    <link href="http://bookstein.github.io/blog/2016/11/01/es6-magic/"/>
    <updated>2016-11-01T21:59:17-07:00</updated>
    <id>http://bookstein.github.io/blog/2016/11/01/es6-magic</id>
    <content type="html"><![CDATA[<p><img class="[Hermione casting a spell]" src="/images/hermione.jpg" width="338" height="478" title="[Hermione [Hermione]]" ></p>

<h6>Image: <a href="http://harry-potter-fanart.tumblr.com/post/135838347291/hermione-granger-by-fridouw">Harry Potter FanArt by fridouw</a></h6>

<p>Hermione might have read a whole book on Arithmancy, but the spells that save the day always seem to boil down to <em>Alohamora</em>, <em>Expelliarmus</em> and <em>Expecto Patronum</em>.</p>

<p>Just like every wizard needs her shortlist of handy spells, there are a couple of new Javascript features that might just disarm Voldemort, save Hogwarts, and/or beautify your code every damn day.</p>

<p>Here are 3 particularly magical aspects of ES6 that will brighten your day faster than you can say <em>Lumos</em>!</p>

<ul>
<li><a href="#arrow_functions">arrow functions</a>,</li>
<li><a href="#destructuring">object destructuring</a></li>
<li><a href="#variables">variable scoping</a></li>
</ul>


<h3><a name="arrow_functions"></a>Arrow functions</h3>

<p>In addition to defining functions with the <code>function</code> keyword, you can now define functions using arrow notation.</p>

<h4>Old way:</h4>

<pre><code class="javascript">function doAThing() {
     console.log(“Doing a thing now")
     console.log(“Done")
}
</code></pre>

<h4>Arrow way:</h4>

<pre><code class="javascript">doAThing = () =&gt; {
     console.log(“Doing a thing now")
     console.log(“Done")
}
</code></pre>

<p>(If you’ve used lambdas in Java 8, the setup will feel familiar.)</p>

<p>Arrow functions have 2 simple benefits and 1 complicated benefit.</p>

<h4>Simple benefit 1: less writing</h4>

<p>We get rid of the <code>function</code> keyword! So fly, so hip!</p>

<h4>Simple benefit 2: implicit returns</h4>

<p>You can write one-liners like this, without curly braces:
<code>returnAString = () =&gt; “Here's your string”</code></p>

<h4>Complicated benefit: no re-binding of <code>this</code></h4>

<p>Arrow functions should <strong>not</strong> be used as a one-to-one replacement for regular functions because they affect the scope of <code>this</code>.</p>

<p>In old-school Javascript functions, <code>this</code> refers to the local scope.</p>

<p>```javascript</p>

<script>
const div = document.querySelector(‘.myDiv’)
div.addEventListener(‘click, function() {
     console.log(this) // —> <div class=‘myDiv'> Hi </div>
})
</script>


<pre><code>
An arrow function doesn't create its own context, so the value of `this` is simply inherited from the parent scope.
</code></pre>

<script>
const div = document.querySelector(‘div’)
div.addEventListener(‘click, () => {
     console.log(this) // —> window
}
</script>


<pre><code>
So, be careful about using arrow functions, particularly when using event listeners.

### &lt;a name="destructuring"&gt;&lt;/a&gt;Object destructuring

Object destructuring is super handy. It saves you a lot of writing, and it saves a lot of headaches when it comes to passing arguments into functions and returning values from functions.

#### Less writing
Old way:
</code></pre>

<p>var thing1 = obj.thing1
var thing2 = obj.thing2
```</p>

<p>New way:
<code>javascript
const { thing1, thing2 } = obj
</code></p>

<p>ES6 simply looks inside <code>obj</code> for properties with names matching <code>thing1</code> and <code>thing2</code> and assigns the correct value.</p>

<h4>Multiple return values</h4>

<p>Object destructuring helps us unpack multiple values returned from a function.</p>

<pre><code class="javascript">function returnObj( ) {
     return { thing1: 'red fish', thing2: 'blue fish' }
}

const { thing1, thing2 } = returnObj();

console.log(thing1) // 'red fish'
console.log(thing2)  // 'blue fish'
</code></pre>

<h4>Passing in arguments</h4>

<pre><code class="javascript">function tipCalculator( { total, tip = 0.20, tax = 0.11 } ) {
     return total * tip + total * tax + total
}

const bill = tipCalculator( {tax: 0.14, total: 200} )
</code></pre>

<p>Here, we pass in an object to the function <code>tipCalculator</code> and the argument gets destructured inside the function. This allows arguments to be passed in any order — and you can even rely on defaults so you don’t have to pass in every value.</p>

<h3><a name="variables"></a>Var/let/const: variable scoping</h3>

<p>ES6&rsquo;s variable declaration keywords <code>var</code>, <code>let</code> and <code>const</code> allow you to declare variables with a variety of scoping and overwriting rules.</p>

<ul>
<li><p><code>var</code> is function-scoped</p>

<ul>
<li>if not declared inside a function, the variable is global</li>
</ul>
</li>
<li><p><code>let</code> has a block scope</p>

<ul>
<li>the variable is only defined inside whatever block it&rsquo;s in (including <code>if</code> blocks)</li>
<li>you cannot define same variable multiple times using <code>let</code> in the same scope</li>
</ul>
</li>
<li><p><code>const</code> (“constant”) variables cannot be re-assigned a value</p>

<ul>
<li>properties of a const <strong>can</strong> be changed though!</li>
</ul>
</li>
</ul>


<p>The rule of thumb I’ve been using: by default, assign your variables using <code>const</code> unless you know the value is going to change. (I <code>const</code>antly use <code>const</code>!)</p>

<p>This way, I never accidentally overwrite a variable whose value I never wanted to change, and I am forced to make a conscious decision at the outset about how to use variables.</p>

<p>If I want to declare a variable and set its value later (based on if/else logic, for example), I use <code>let</code>. (I almost never use <code>var</code>.)</p>

<h3>Summary</h3>

<p>ES6 has a ton of awesome, time-saving shortcuts built into it &ndash; shortcuts that any worthy wizard would make sure to add to her spellbook. These magical tools aren’t just esoteric/academic fluff — I use them all the time, and I’m a first year myself.</p>

<p>P.S. If you want a tutorial overview of ES6, I’m really enjoying <a href="https://es6.io/">es6.io</a> by Wes Bos (who inspired some of my examples above). The tutorial is easy to follow, and it not only teaches you about ES6’s new features but is basically a Javascript crash course in itself. It&rsquo;ll totally <em>transfigure</em> your ES6 familiarity!</p>
]]></content>
  </entry>
  
</feed>
