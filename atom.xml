<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blogstein]]></title>
  <link href="http://bookstein.github.io/atom.xml" rel="self"/>
  <link href="http://bookstein.github.io/"/>
  <updated>2016-12-20T23:24:46-08:00</updated>
  <id>http://bookstein.github.io/</id>
  <author>
    <name><![CDATA[Emily Bookstein]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[React Testing, Part 2]]></title>
    <link href="http://bookstein.github.io/blog/2016/12/20/if-i-only-had-a-test/"/>
    <updated>2016-12-20T09:25:52-08:00</updated>
    <id>http://bookstein.github.io/blog/2016/12/20/if-i-only-had-a-test</id>
    <content type="html"><![CDATA[<p><img class="[If I only had a test]" src="http://bookstein.github.io/images/if_I_only_had_a_brain.png" width="523" height="392" title="[Scarecrow [Scarecrow]]" ></p>

<h6>Image: <a href="https://www.google.com/url?sa=i&amp;rct=j&amp;q=&amp;esrc=s&amp;source=images&amp;cd=&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwiNptKjpYPRAhUY5WMKHX-gBY4QjB0IBg&amp;url=http%3A%2F%2Fwww.quickmeme.com%2Fmeme%2F36fr5j&amp;psig=AFQjCNEw6QsdkwrYPoAtlLuhn89jrul6JQ&amp;ust=1482341155914045">Quickmeme</a></h6>

<h5>My last post was titled “Testing React Router: Part 1.” Which seems to imply there&rsquo;s a Part 2 about React Router. But I want to… er… <em>re-route</em> the conversation. This post is about testing React components and how integration tests can save the day.</h5>

<hr />

<p><em>The project was almost complete. My time as team captain was almost over. Victory was in sight&hellip;</em></p>

<p>My team had been working on Source Maps &ldquo;Dragondrop,&rdquo; a UI feature allowing users to drag and drop <a href="https://www.html5rocks.com/en/tutorials/developertools/sourcemaps/">source maps</a> to unminify Javascript error stack traces. As the project&rsquo;s team captain, I had generated a list of test cases and scheduled a team &ldquo;bug hunt&rdquo; to go through them manually.</p>

<p>The test plan looked something like this:</p>

<blockquote><ol>
<li>Happy path! Drag and drop the correct source map onto the stack trace.
Verify unminified line #, column #, and source code.</li>
<li>Drag and drop the wrong source map onto the stack trace.
Verify error message banner saying wrong file.</li>
<li>Drag and drop a source map with no source content.
Verify warning banner saying no source content, but correctly unminified line # and column #.</li>
</ol>
</blockquote>

<p>Etc.</p>

<p>Our bug hunt revealed that most test cases passed! But it also revealed a subtly bug&hellip; and that final bug fix ballooned into taking multiple extra days.</p>

<p><em>How could we have caught this UI issue earlier? And what could we do to prevent regressions while we refactored the code to fix the problem?</em></p>

<h3>Testing Front-End Applications Is About User Perspective</h3>

<p>React child components re-render when there&rsquo;s a state change in a parent component. In our app, these children were <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.ouvy9otiu">presentational components</a> called <code>StackTraceItems</code> &ndash; the individual line items of a stack trace. The parent was <code>StackTrace</code>, the container component at the top level of the hierarchy, where we stored uploaded source maps as state.</p>

<p><img class="[source map state]" src="http://bookstein.github.io/images/sourcemap_state.png" width="470" height="433" title="[Source maps [source maps]]" ></p>

<h6>Source maps are stored in <code>StackTrace</code> state.</h6>

<p>Here was the problem: when a user dragged in the <em>wrong</em> source map, <code>StackTrace</code> stored the file, applied the source map to the minified stack trace, and then confirmed whether or not unminification had been successful. Even if it was <em>not</em> successful, the state change in <code>StackTrace</code> caused <code>StackTraceItems</code> to update as if a correct source map had been uploaded.</p>

<p>Adding insult to injury, all of our tests were passing.
<img class="[No good]" src="http://bookstein.github.io/images/no_good.png" width="25" height="25" title="[No good [No good]]" ></p>

<p>Our tests were passing, all right, but they were all unit tests. All they did was confirm that components rendered properly given certain props, and that user interaction worked as expected. The problem we were facing was that, <em>from a user perspective,</em> the app looked broken.</p>

<h3>How to Write Front-end Tests That Save You Time and Anxiety</h3>

<h4>0. Have the right tools</h4>

<p>These are the libraries and tools that allowed us to write all the React tests we wanted:</p>

<ul>
<li><a href="https://github.com/airbnb/enzyme">Enzyme (React Test Utilities)</a></li>
<li><a href="http://chaijs.com/api/assert/">Chai Assertion Library</a></li>
<li><a href="http://sinonjs.org/">Sinon: Test Spies and Mocks</a></li>
</ul>


<h4>1. Have a basic set of unit tests for every component</h4>

<p>Unit tests are great for testing components in isolation. These tests tell you whether the component renders at all, and that it does <em>X</em> when you click it.</p>

<p>Unit tests should check that:</p>

<ul>
<li>component shallowly renders, given props (Enzyme&rsquo;s <code>shallow</code>)</li>
<li>user interaction works as expected</li>
<li>elements that you want to show/hide will appear or disappear depending on props</li>
</ul>


<p>Keep unit tests basic. And don&rsquo;t rely on unit tests alone.</p>

<h4>2. Add integration tests for all major user flows</h4>

<p>Integration tests are necessary for testing actual user experience. After all, your user is going to experience your app as an holistic piece of software, not in the form of isolated components.</p>

<p>If your app is structured to have just <strong>one source of truth</strong> &ndash; where high-level state changes trigger a cascade of updates to lower-level components &ndash; it&rsquo;s easy to test.</p>

<p>Integration tests should:</p>

<ul>
<li>deep-render your components (Enzyme&rsquo;s <code>mount</code>)</li>
<li>call <code>setState</code> on your top-level stateful component to trigger the changes you want to test</li>
<li>check for props passed to presentational components, thereby validating what we want the user to <strong>see</strong> on the page</li>
</ul>


<p>What clues do you find yourself looking for when you manually test something? What tells you that a code change worked or not? Check for the props behind those visual cues in your integration tests. Your tests should impersonate your user&rsquo;s eyes.</p>

<blockquote><p>&ldquo;Unit testing is great: it’s the best way to see if an algorithm does the right thing every time, or to check our input validation logic, or data transformations, or any other isolated operation. Unit testing is perfect for fundamentals.
But front-end code isn’t about manipulating data. It’s about user events and rendering the right views at the right time. Front-ends are about users.&rdquo;
&ndash; <a href="https://www.toptal.com/react/how-react-components-make-ui-testing-easy">Toptal.com</a></p></blockquote>

<h4>3. Don&rsquo;t leave integration tests until the end</h4>

<p>We were about 2/3 of the way through the project when I wrote up our bug-hunt test plan. The team went through the test plan twice in QA bug hunts, where it was easy as pie to find the last remaining bugs and UX fixes.</p>

<p>But that test plan should have doubled as an outline for integration tests right away. In fact, writing the integration tests should have happened at <em>about the same point in the project</em> as coming up with the test plan. That way, all that high-level testing would have been automated for future use, and at a point in the project when we had a good sense of our app&rsquo;s major user flows and potential pitfalls!</p>

<h3>In Summary</h3>

<p>Unit tests are a great baseline. But we needed <strong>integration tests</strong> to allow us to refactor boldly, as well as save us time in manual testing along the way.</p>

<p>Writing tests during a fast-paced project always feels like a roadblock on your journey down the yellow-brick road. But taking that time might be the only way you get back to Kansas all in one piece.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing React Router: Part 1]]></title>
    <link href="http://bookstein.github.io/blog/2016/11/30/testing-react-router-1/"/>
    <updated>2016-11-30T10:20:31-08:00</updated>
    <id>http://bookstein.github.io/blog/2016/11/30/testing-react-router-1</id>
    <content type="html"><![CDATA[<p>I&rsquo;m a believer.</p>

<p>I have joined the ranks of those who see the URL as the One Almighty Source of Truth. In this vein, we use <a href="https://github.com/ReactTraining/react-router">React Router</a> to determine which components and data to show.</p>

<p>But even though I&rsquo;m a believer, I&rsquo;m also a cynic. Let&rsquo;s put our faith in the URL to the test.</p>

<h3>Why should we test our routing?</h3>

<p>With the URL as the source of truth, we can expect the view to significantly change depending on the URL path or query params. Shouldn&rsquo;t we have tests that ensure the correct components show up? Especially if you have complicated routing: nested routes, query params, optional routes, etc.</p>

<h3>Initial exploration</h3>

<p>The folks who wrote React Router wrote a <a href="https://github.com/ReactTraining/react-router/blob/master/modules/__tests__/matchRoutes-test.js">set of tests</a> that verify whether a matching route can be found for a given path.</p>

<p>For example, here&rsquo;s a test that verifies that a path of <code>/users</code> will yield the correct set of matching routes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">routes</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'> <span class="nx">RootRoute</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">childRoutes</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="nx">UsersRoute</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;users&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">indexRoute</span><span class="o">:</span> <span class="p">(</span><span class="nx">UsersIndexRoute</span> <span class="o">=</span> <span class="p">{}),</span>
</span><span class='line'>        <span class="nx">childRoutes</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="nx">UserRoute</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;:userID&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;when the location matches an index route&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;matches the correct routes&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">matchRoutes</span><span class="p">(</span><span class="nx">routes</span><span class="p">,</span> <span class="nx">createLocation</span><span class="p">(</span><span class="s1">&#39;/users&#39;</span><span class="p">),</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">match</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">expect</span><span class="p">(</span><span class="nx">match</span><span class="p">).</span><span class="nx">toExist</span><span class="p">()</span>
</span><span class='line'>          <span class="nx">expect</span><span class="p">(</span><span class="nx">match</span><span class="p">.</span><span class="nx">routes</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">([</span> <span class="nx">RootRoute</span><span class="p">,</span> <span class="nx">UsersRoute</span><span class="p">,</span> <span class="nx">UsersIndexRoute</span> <span class="p">])</span>
</span><span class='line'>          <span class="nx">done</span><span class="p">()</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h6>See the full React Router test <a href="https://github.com/ReactTraining/react-router/blob/master/modules/__tests__/matchRoutes-test.js">here</a>.</h6>

<p>I couldn&rsquo;t find much out there on the Interwebz about testing React routes. So, my first step was to see if I could just get React Router&rsquo;s &ldquo;matching routes&rdquo; test suite working for an existing app that has its own simple front-end routing.</p>

<p>It was a bit of a struggle.</p>

<p>The most important part was to convert the routes in <code>routes.js</code> to JSON instead of JSX. This is because React Router&rsquo;s tests use a <code>matchRoutes</code> testing tool that rely on routes having a certain structure. Their test suite recreates a complicated nest of test routes inside the test itself. If I were writing my own routes test, it would be pretty annoying to have to update a handmade list of routes in the test every time the app&rsquo;s routes changed. Writing routes as JSON will allow me to simply import my routes from the routes file into the test.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// in routes.js</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="kr">const</span> <span class="nx">Routes</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nx">component</span><span class="o">:</span> <span class="nx">App</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">onEnter</span><span class="o">:</span> <span class="nx">trackUserId</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">childRoutes</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="nx">path</span><span class="o">:</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">component</span><span class="o">:</span> <span class="s2">&quot;LandingPageComponent&quot;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="nx">path</span><span class="o">:</span> <span class="s2">&quot;/buy&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">component</span><span class="o">:</span> <span class="s2">&quot;BuyComponent&quot;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// in __test__/routes_spec.js</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">Routes</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;../routes&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="nx">matchRoutes</span><span class="p">(</span><span class="nx">Routes</span><span class="p">,</span> <span class="nx">createLocation</span><span class="p">(</span><span class="s1">&#39;/buy&#39;</span><span class="p">),</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">match</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h3>What to test?</h3>

<p>I don&rsquo;t want my routes test to test <em>React Router</em>&rsquo;s logic &ndash; it&rsquo;s not my place to make sure that React Router knows how to find a matching route from a given path. I want to test the logic that I&rsquo;m creating for the app. So, what I <em>do</em> want to test is that all the right information is displayed on the page if I hit the &ldquo;/&rdquo; path versus the &ldquo;/buy&rdquo; path.</p>

<p>For example, I could check that loading &ldquo;/buy&rdquo; adds the <code>SearchWidget</code> and <code>ShoppingCartWidget</code> to the page, and that hitting the root &ldquo;/&rdquo; shows the <code>FullPageSplashComponent</code>.</p>

<p>But HOW to do that? Stay tuned, more to come.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 Handy Spells for the Aspiring ES6 Wizard]]></title>
    <link href="http://bookstein.github.io/blog/2016/11/01/es6-magic/"/>
    <updated>2016-11-01T21:59:17-07:00</updated>
    <id>http://bookstein.github.io/blog/2016/11/01/es6-magic</id>
    <content type="html"><![CDATA[<p><img class="[Hermione casting a spell]" src="http://bookstein.github.io/images/hermione.jpg" width="338" height="478" title="[Hermione [Hermione]]" ></p>

<h6>Image: <a href="http://harry-potter-fanart.tumblr.com/post/135838347291/hermione-granger-by-fridouw">Harry Potter FanArt by fridouw</a></h6>

<p>Hermione might have read a whole book on Arithmancy, but the spells that save the day always seem to boil down to <em>Alohamora</em>, <em>Expelliarmus</em> and <em>Expecto Patronum</em>.</p>

<p>Just like every wizard needs her shortlist of handy spells, there are a couple of new Javascript features that might just disarm Voldemort, save Hogwarts, and/or beautify your code every damn day.</p>

<p>Here are 3 particularly magical aspects of ES6 that will brighten your day faster than you can say <em>Lumos</em>!</p>

<ul>
<li><a href="#arrow_functions">arrow functions</a>,</li>
<li><a href="#destructuring">object destructuring</a></li>
<li><a href="#variables">variable scoping</a></li>
</ul>


<h3><a name="arrow_functions"></a>Arrow functions</h3>

<p>In addition to defining functions with the <code>function</code> keyword, you can now define functions using arrow notation.</p>

<h4>Old way:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">doAThing</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">“</span><span class="nx">Doing</span> <span class="nx">a</span> <span class="nx">thing</span> <span class="nx">now</span><span class="s2">&quot;)</span>
</span><span class='line'><span class="s2">     console.log(“Done&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Arrow way:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">doAThing</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">“</span><span class="nx">Doing</span> <span class="nx">a</span> <span class="nx">thing</span> <span class="nx">now</span><span class="s2">&quot;)</span>
</span><span class='line'><span class="s2">     console.log(“Done&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(If you’ve used lambdas in Java 8, the setup will feel familiar.)</p>

<p>Arrow functions have 2 simple benefits and 1 complicated benefit.</p>

<h4>Simple benefit 1: less writing</h4>

<p>We get rid of the <code>function</code> keyword! So fly, so hip!</p>

<h4>Simple benefit 2: implicit returns</h4>

<p>You can write one-liners like this, without curly braces:
<code>returnAString = () =&gt; “Here's your string”</code></p>

<h4>Complicated benefit: no re-binding of <code>this</code></h4>

<p>Arrow functions should <strong>not</strong> be used as a one-to-one replacement for regular functions because they affect the scope of <code>this</code>.</p>

<p>In old-school Javascript functions, <code>this</code> refers to the local scope.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="err">‘</span><span class="p">.</span><span class="nx">myDiv</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="nx">div</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="err">‘</span><span class="nx">click</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="c1">// —&gt; &lt;div class=‘myDiv&#39;&gt; Hi &lt;/div&gt;</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>An arrow function doesn&rsquo;t create its own context, so the value of <code>this</code> is simply inherited from the parent scope.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="err">‘</span><span class="nx">div</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="nx">div</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="err">‘</span><span class="nx">click</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="c1">// —&gt; window</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, be careful about using arrow functions, particularly when using event listeners.</p>

<h3><a name="destructuring"></a>Object destructuring</h3>

<p>Object destructuring is super handy. It saves you a lot of writing, and it saves a lot of headaches when it comes to passing arguments into functions and returning values from functions.</p>

<h4>Less writing</h4>

<p>Old way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">thing1</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">thing1</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">thing2</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">thing2</span>
</span></code></pre></td></tr></table></div></figure>


<p>New way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="p">{</span> <span class="nx">thing1</span><span class="p">,</span> <span class="nx">thing2</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span>
</span></code></pre></td></tr></table></div></figure>


<p>ES6 simply looks inside <code>obj</code> for properties with names matching <code>thing1</code> and <code>thing2</code> and assigns the correct value.</p>

<h4>Multiple return values</h4>

<p>Object destructuring helps us unpack multiple values returned from a function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">returnObj</span><span class="p">(</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="p">{</span> <span class="nx">thing1</span><span class="o">:</span> <span class="s1">&#39;red fish&#39;</span><span class="p">,</span> <span class="nx">thing2</span><span class="o">:</span> <span class="s1">&#39;blue fish&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="p">{</span> <span class="nx">thing1</span><span class="p">,</span> <span class="nx">thing2</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">returnObj</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">thing1</span><span class="p">)</span> <span class="c1">// &#39;red fish&#39;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">thing2</span><span class="p">)</span>  <span class="c1">// &#39;blue fish&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Passing in arguments</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">tipCalculator</span><span class="p">(</span> <span class="p">{</span> <span class="nx">total</span><span class="p">,</span> <span class="nx">tip</span> <span class="o">=</span> <span class="mf">0.20</span><span class="p">,</span> <span class="nx">tax</span> <span class="o">=</span> <span class="mf">0.11</span> <span class="p">}</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="nx">total</span> <span class="o">*</span> <span class="nx">tip</span> <span class="o">+</span> <span class="nx">total</span> <span class="o">*</span> <span class="nx">tax</span> <span class="o">+</span> <span class="nx">total</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">bill</span> <span class="o">=</span> <span class="nx">tipCalculator</span><span class="p">(</span> <span class="p">{</span><span class="nx">tax</span><span class="o">:</span> <span class="mf">0.14</span><span class="p">,</span> <span class="nx">total</span><span class="o">:</span> <span class="mi">200</span><span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we pass in an object to the function <code>tipCalculator</code> and the argument gets destructured inside the function. This allows arguments to be passed in any order — and you can even rely on defaults so you don’t have to pass in every value.</p>

<h3><a name="variables"></a>Var/let/const: variable scoping</h3>

<p>ES6&rsquo;s variable declaration keywords <code>var</code>, <code>let</code> and <code>const</code> allow you to declare variables with a variety of scoping and overwriting rules.</p>

<ul>
<li><p><code>var</code> is function-scoped</p>

<ul>
<li>if not declared inside a function, the variable is global</li>
</ul>
</li>
<li><p><code>let</code> has a block scope</p>

<ul>
<li>the variable is only defined inside whatever block it&rsquo;s in (including <code>if</code> blocks)</li>
<li>you cannot define same variable multiple times using <code>let</code> in the same scope</li>
</ul>
</li>
<li><p><code>const</code> (“constant”) variables cannot be re-assigned a value</p>

<ul>
<li>properties of a const <strong>can</strong> be changed though!</li>
</ul>
</li>
</ul>


<p>The rule of thumb I’ve been using: by default, assign your variables using <code>const</code> unless you know the value is going to change. (I <code>const</code>antly use <code>const</code>!)</p>

<p>This way, I never accidentally overwrite a variable whose value I never wanted to change, and I am forced to make a conscious decision at the outset about how to use variables.</p>

<p>If I want to declare a variable and set its value later (based on if/else logic, for example), I use <code>let</code>. (I almost never use <code>var</code>.)</p>

<h3>Summary</h3>

<p>ES6 has a ton of awesome, time-saving shortcuts built into it &ndash; shortcuts that any worthy wizard would make sure to add to her spellbook. These magical tools aren’t just esoteric/academic fluff — I use them all the time, and I’m a first year myself.</p>

<p>P.S. If you want a tutorial overview of ES6, I’m really enjoying <a href="https://es6.io/">es6.io</a> by Wes Bos (who inspired some of my examples above). The tutorial is easy to follow, and it not only teaches you about ES6’s new features but is basically a Javascript crash course in itself. It&rsquo;ll totally <em>transfigure</em> your ES6 familiarity!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Navigation Timing API]]></title>
    <link href="http://bookstein.github.io/blog/2016/10/20/navigation-timing-api/"/>
    <updated>2016-10-20T18:47:44-07:00</updated>
    <id>http://bookstein.github.io/blog/2016/10/20/navigation-timing-api</id>
    <content type="html"><![CDATA[<p>Learning about the Navigation Timing API is surprisingly similar to learning “how the Internet works.” In fact, if I was asked to sketch &ldquo;how the Internet works&rdquo; as a job interview question, I&rsquo;d probably draw a timeline of events pretty similar to this:</p>

<p><img class="[Navigation Timing API]" src="http://bookstein.github.io/images/navtimingapi1.png" width="740" height="353" title="[Navigation Timing API [diagram]]" ></p>

<h6>Image: <a href="https://www.w3.org/TR/navigation-timing/">W3C Navigation Timing</a></h6>

<p>Which, of course, is how the Navigation Timing API views the world, too.</p>

<p>The <a href="https://www.w3.org/TR/navigation-timing/">Navigation Timing API</a> is an API that tracks navigation and page load timing. It’s especially useful for gathering information about the wait time perceived by the end user. Timestamps from along the page-load timeline (see diagram above) are stored in an object in the browser window, <code>window.performance.timing</code>. Doing some simple math using those timestamps can reveal the wait times hidden in parts of the process between clicking a link and seeing the fully-loaded page.</p>

<p>The <code>navigationStart</code> timestamp is collected the moment that the previous document is unloaded and the new page fetch begins. The browser looks in the cache, does a DNS lookup if it can&rsquo;t find an entry, connects to the identified server, sends a request, receives the response (in bytes), and then processes the response into the fully-loaded page. All of these steps, and the transitions between them, are identified by events fired off by the browser. The Navigation Timing API notes these events and stores them as start and end times inside <code>window.performance.timing</code>.</p>

<p>The Navigation Timing API ends with the window’s <code>load</code> event, which fires when the DOM is complete and all images, scripts and links have loaded. However, many webpages continue to fire off AJAX calls after the page has loaded. AJAX calls might even <em>replace</em> additional page loads, as in the case of single-page apps where the full page loads only once.</p>

<p><img class="[Navigation Timing API]" src="http://bookstein.github.io/images/navtimingapi.png" width="740" height="353" title="[Navigation Timing API [diagram]]" ></p>

<p>These asynchronous, post-DOM-load requests might make it harder to understand total page load performance, but it&rsquo;s not too difficult. How long do you wait for an AJAX response? How long does each Javascript callback (a function waiting for an asynchronous request to complete) take to finish running? These wait times can be tracked, too &ndash; although not with the Navigation Timing API. You might want to check out <a href="https://newrelic.com/browser-monitoring">New Relic Browser Monitoring</a>&hellip;</p>

<p><img class="[AJAX calls]" src="http://bookstein.github.io/images/ajax.png" title="[AJAX breakdown [diagram]]" ></p>

<h6>Image: based on screenshot from <a href="https://newrelic.com/browser-monitoring">New Relic Browser - Session Traces</a></h6>

<h3>Various Sources:</h3>

<ul>
<li><a href="http://developer.telerik.com/featured/introduction-navigation-timing-api/">Intro to the Navigation Timing API (blog post)</a></li>
<li><a href="https://davidwalsh.name/measuring-performance">Measuring Performance (blog post)</a></li>
<li><a href="https://blog.newrelic.com/2016/10/17/network-friendly-single-page-apps/">Measuring Performance of Single-Page Apps (blog post)</a></li>
<li><a href="https://newrelic.com/browser-monitoring">New Relic Browser Monitoring</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload">About the Onload event (MDN docs)</a></li>
<li><a href="http://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/">FYI, a good explanation of &ldquo;how the Internet works&rdquo;</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Child or prop?]]></title>
    <link href="http://bookstein.github.io/blog/2016/10/05/child-or-prop/"/>
    <updated>2016-10-05T20:44:25-07:00</updated>
    <id>http://bookstein.github.io/blog/2016/10/05/child-or-prop</id>
    <content type="html"><![CDATA[<p>Child or prop? Puppy or bagel?</p>

<p><img class="[Puppy or Bagel]" src="http://bookstein.github.io/images/puppyorbagel.jpg" width="450" height="449" title="[Puppy or bagel [puppy or bagel]]" ></p>

<h6>Image: <a href="http://imgur.com/gallery/XsJCNHi">Imgur</a></h6>

<p>Once we get past the amazing likeness of puppies and bagels: let&rsquo;s talk about the similarities and differences between React children and props.</p>

<p>I initially didn&rsquo;t understand the difference. Why have both, if they&rsquo;re just two different ways to pass around information? When should I use props, and when should I use children?</p>

<h3>Parents vs. Owners</h3>

<p>The key to understanding the distinction is understanding the difference between the owner-ownee relationship and the parent-child relationship.</p>

<p>The <strong>parent-child relationship</strong> is a familiar one. For example, a classic DOM layout:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;parent&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">id=</span><span class="s">&quot;child1&quot;</span><span class="nt">&gt;</span>Child 1<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">id=</span><span class="s">&quot;child2&quot;</span><span class="nt">&gt;</span>Child 2<span class="nt">&lt;li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The list elements are children of the unordered list. They are literally nested inside the <code>&lt;ul&gt;</code>. In React, too, a child component is literally nested inside the parent: <code>&lt;Parent&gt; &lt;Child /&gt; &lt;/Parent&gt;</code></p>

<p>The <strong>owner-ownee relationship</strong> is a little different. In <a href="https://facebook.github.io/react/docs/multiple-components.html">Facebook&rsquo;s React docs</a> the definition is this:</p>

<blockquote><p>An owner is the component that sets the props of other components. More formally, if a component X is created in component Y&rsquo;s <code>render( )</code> method, it is said that X is <strong>owned</strong> by Y.</p></blockquote>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>class Engineer extends React.Component {
</span><span class='line'>    render() {
</span><span class='line'>        return(
</span><span class='line'>            <span class="nt">&lt;pre&gt;</span>
</span><span class='line'>                <span class="nt">&lt;CodeSnippet</span> <span class="na">language=</span><span class="s">{this.props.language}</span> <span class="na">codeSmell=</span><span class="s">{this.props.smell}</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/pre&gt;</span>
</span><span class='line'>        );
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Here, the <code>CodeSnippet</code> is owned by the <code>Engineer</code>, who renders it and is reponsible for its props. (Let that be a lesson to all of us.)</p>

<p>A parent is not the same as an owner. In the above example, <code>pre</code> is the <strong>parent</strong> of <code>CodeSnippet</code>, because a CodeSnippet is nested inside of a <code>pre</code> tag. But <code>pre</code> is not the owner.</p>

<h3>How to pass in children</h3>

<p>This was perhaps the source of my original confusion about children vs. props: children <em>are</em> actually props. But they are a special kind of prop, with their <a href="https://facebook.github.io/react/docs/top-level-api.html#react.children">own set of utilities</a>. The special prop is <code>this.props.children</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>class HasManyChildren extends React.Component {
</span><span class='line'>  render() {
</span><span class='line'>      return (
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;parent&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            {this.props.children}
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      )
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>ReactDOM.render(
</span><span class='line'>  <span class="nt">&lt;HasManyChildren&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Child</span> <span class="na">value=</span><span class="s">&quot;1&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Child</span> <span class="na">value=</span><span class="s">&quot;2&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/HasManyChildren&gt;</span>,
</span><span class='line'>    document.getElementById(&#39;container&#39;)
</span><span class='line'>);
</span></code></pre></td></tr></table></div></figure>


<p>Two children are being passed into the parent <code>HasManyChildren</code> &ndash; and can be accessed with <code>this.props.children</code>.</p>

<h3>Which one??</h3>

<p>So when to use children and when to use regular props as a way to pass down information? The best answer I&rsquo;ve heard so far:</p>

<h5>children are for dynamic content</h5>

<p>Just like with a Ruby <code>yield</code>, you can pass in any children to a component and it can access them with <code>{this.props.children}</code>. For example, maybe you want to render a Ninja component when the user hits the <code>/ninja</code> route, but render a Pirate component if the user lands on <code>/pirate</code>. You can use <code>this.props.children</code> to render either set of components in the React Router.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// in routes</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;ninja&quot;</span> <span class="nx">component</span><span class="o">=</span><span class="p">{</span><span class="nx">NinjaComponent</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;pirate&quot;</span> <span class="nx">component</span><span class="o">=</span><span class="p">{</span><span class="nx">PirateComponent</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// in app.js</span>
</span><span class='line'><span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span> <span class="nx">Pirate</span> <span class="nx">or</span> <span class="nx">Ninja</span><span class="o">?</span> <span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">}</span> <span class="c1">// renders either PirateComponent or NinjaComponent</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>props are like arguments that must be passed in</h5>

<p>Props, however, are the pieces required for components to render. Just like a method&rsquo;s arguments are required for a method call, a component must receive props before it can mount. If a Pirate component must have a priate flag to be rendered, you&rsquo;d better pass one in, matey:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">Pirate</span> <span class="nx">pirateFlag</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">pirateFlag</span><span class="p">}</span> <span class="nx">shipName</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">shipName</span><span class="p">}</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Sources</h3>

<ul>
<li><a href="http://jaketrent.com/post/send-props-to-children-react/">http://jaketrent.com/post/send-props-to-children-react/</a></li>
<li><a href="https://facebook.github.io/react/docs/multiple-components.html">https://facebook.github.io/react/docs/multiple-components.html</a></li>
<li>my awesome coworker</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AlterConf]]></title>
    <link href="http://bookstein.github.io/blog/2016/09/29/alterconf/"/>
    <updated>2016-09-29T20:55:37-07:00</updated>
    <id>http://bookstein.github.io/blog/2016/09/29/alterconf</id>
    <content type="html"><![CDATA[<h3>On tech diversity, structural change, and money</h3>

<ul>
<li><a href="https://docs.google.com/presentation/d/1phm9JTZfl32ljn-cYbiP8tNnmtRwo5x_ISp45TpzsgU/edit?usp=sharing">Slides</a></li>
<li><a href="tech-diversity-and-social-justice">Resources, next steps, and more links</a></li>
</ul>


<p>Related to the <strong>3 next steps</strong> I outline in my talk:</p>

<ol>
<li><p><a href="http://socialjusticefund.org/grantees">Social Justice Fund NW grantees</a>, for inspiration</p></li>
<li><p><a href="http://resourcegeneration.org">Resource Generation</a> &amp;&amp; <a href="https://resourcegeneration.org/2016/06/how-to-give-boldly-from-earned-income-a-guide-for-techies-and-others-who-dont-come-from-wealthy-backgrounds">How To Give Boldly From Earned Income</a>, for resources and guidelines on giving plans</p></li>
<li><p><a href="https://resourcegenerationpdx.wordpress.com">Portland Resource Generation chapter</a> to find out more about the upcoming discussion group</p></li>
</ol>


<hr />

<p>Putting this talk together for <a href="https://www.alterconf.com/conferences/portland-or-2016">AlterConf Portland</a> has been an interesting journey. I&rsquo;ll admit that for the two weeks before the conference I felt a lot of anxiety about giving this talk. Not only does the presentation touch on a few subjects that are taboo, at least in white middle-class society (race, wealth, class privilege), but it also required some public vulnerability from me around my class and race privilege. I also really wanted to do justice to these huge topics &ndash; which felt challenging since I am still learning so much myself.</p>

<p>Since I am a white person speaking about race, and am someone with an upper-middle-class childhood speaking about giving away money, I wouldn&rsquo;t be surprised if there are moments when some people in the audience feel uncomfortable. It is my hope that the discomfort is not due to any personal harm caused by my words, but is instead the <em>GOOD</em> kind of discomfort, like the discomfort of entertaining new and different thoughts.</p>

<p>I am very open to positive or constructive feedback and would love to hear from you. The best way to reach me is by <a href="mailto:ehbookstein@gmail.com">email</a>. <strong>And if you have any questions about giving plans, <a href="http://resourcegeneration.org">Resource Generation</a> or <a href="http://socialjusticefund.org">Social Justice Fund Northwest</a>, hit me up!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting goals]]></title>
    <link href="http://bookstein.github.io/blog/2016/09/16/setting-goals/"/>
    <updated>2016-09-16T22:13:03-07:00</updated>
    <id>http://bookstein.github.io/blog/2016/09/16/setting-goals</id>
    <content type="html"><![CDATA[<p><img class="[SMARTGoals]" src="http://bookstein.github.io/images/SmartGoals.jpg" width="281" height="380" title="[SMART goals [image of SMART goal principles]]" ></p>

<h6>Image: <a href="http://www.cognology.com.au/learning_center/howtowritesmartobj/">Cognology</a></h6>

<h3>SMART goals</h3>

<p>Today my new manager told me he believes measurable goals are overrated.</p>

<p>Hm.</p>

<p>Ever since I started working as a software engineer, I have been fearful of falling behind. Of not knowing enough. Of not being intelligent enough. I set tons of goals for myself as soon as I started my job, hoping to power through the uncertainty and the fear. At first these goals were hugely unhelpful. Not only were my lists of goals paralyzingly <em>long</em> &ndash; multiple pages in a Google doc &ndash; but they demanded time-consuming data-tracking just to know whether or not I was succeeding.</p>

<p>When I worked for <a href="http://causes.com">Causes.com</a> organizing student organizers, I learned about <a href="https://en.wikipedia.org/wiki/SMART_criteria">SMART goals</a> &ndash; goals that are <strong>S</strong>pecific, <strong>M</strong>easurable, <strong>A</strong>chievable, <strong>R</strong>ealistic, and <strong>T</strong>imely. I thought SMART goals sounded so, well, smart. Having recently come from college organizing myself, I thought that a good campus campaign should be concrete, have an end date in sight, and convey a clear story about results &ndash; all things that SMART goals spoke to.</p>

<p>Later, as a software engineer, I assumed that my personal goals should also be SMART. I spent a lot of time trying to think of ways to <em>measure</em> my knowledge and learning. By calculating sheer time spent? By counting the number of bonus study sessions per week? By recording a thing I learned every day? By counting numbers of pull requests, pairing sessions, projects completed on my own? I asked my most goal-oriented coworkers to help me craft my goals and strategies, I tried to institute new practices, I kept a daily log of things I&rsquo;d learned or accomplished.</p>

<p>But in the end, my goals didn&rsquo;t act as the solid guideposts I was hoping for. They were worthwhile, for sure, because they forced me to clarify my challenges and intentions. But the act of setting those goals didn&rsquo;t get me much closer to the knowledge and skills &ndash; <em>or</em> the feelings of safety and progress &ndash; that I was after.</p>

<h3>Measurable goals are overrated</h3>

<p>At first, when my manager told me that measurable goals are overrated, I felt resistant. <em>Goals <strong>should</strong> be measurable,</em> I thought to myself, dismayed. <em>How else can you know that you&rsquo;re meeting them?</em> Especially considering the goals he was suggesting for me:</p>

<ul>
<li>acquiring mastery of UI development (by pairing closely with my new coworkers)</li>
<li>developing leadership skills (via project ownership)</li>
</ul>


<p> <em>Mastery</em> was an exciting, thrilling word to read in the context of goals. But it made me feel nervous too. How would I know if I was on track for something as giant-sounding as &ldquo;mastery&rdquo;?</p>

<p>When I asked that question, my manager said that forcing nuanced goals to meet requirements for objective measurability squashes out the <em>richness</em> of the overall goal. &ldquo;Mastery of UI development&rdquo; is a very rich goal &ndash; it has many aspects to it, none of which are easily measurable. In fact, it would require a good amount of mental contortion to find opportunities for objectivity.</p>

<p>Hearing his arguments against measurability, I started to feel a sense of relief. This way, I wouldn&rsquo;t set myself up for another failure on improperly-calibrated, falsely-measurable goals. I wouldn&rsquo;t have to add a bunch of tasks to my daily to-do list just to try and track progress. I wouldn&rsquo;t be handing myself yet another yardstick with which to measure myself and find myself lacking.</p>

<p>The part that finally sold me: my manager asserted that <strong>the point of having these goals is to feel excited about coming to work each day.</strong> Thinking about UI mastery (as unmeasurable as it is) is already doing the trick.</p>

<h3>Relational goals</h3>

<p>An interesting aspect of my manager&rsquo;s goals philosophy is that I can meet my goals simply by going about my regular business: by collaborating on code each day with good conscience and good intentions, and by talking with my manager each week in our regular check-in to resolve challenges as they come up.</p>

<p>This aspect reminded me of a term I&rsquo;ve started hearing recently in activist circles, something called <a href="http://southernersonnewground.org/wp-content/uploads/2012/12/SONG-Relational-Organizing.pdf">relational organizing</a>. In relational organizing, as I understand it, human-to-human relationships are the basis upon which community activism and power is built.</p>

<p>Transferring this idea to my goals at work, the relationship is the building block. Not numbers of facts learned in a day, not PR counts. My goals will be met via relationships bewteen me and my coworkers and between myself and my manager. Goals will be achieved not by the individual studying solo and on the side, but by the individual being incorporated into the flow of others' work.</p>

<p>I think I&rsquo;m going to really enjoy coming to work each day with this in mind.</p>

<hr />

<p>P.S. Apologies to SONG if I&rsquo;m misusing the concept of relational organizing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Legend of Cassandra]]></title>
    <link href="http://bookstein.github.io/blog/2016/09/09/the-legend-of-cassandra/"/>
    <updated>2016-09-09T04:58:00-07:00</updated>
    <id>http://bookstein.github.io/blog/2016/09/09/the-legend-of-cassandra</id>
    <content type="html"><![CDATA[<p><img class="[Cassandra]" src="http://bookstein.github.io/images/cassandra.jpeg" width="620" height="372" title="[Cassandra [painting of Cassandra]]" ></p>

<h6>Image: <a href="https://www.theguardian.com/world/2015/jan/26/alexis-tsiprass-victory-speech-cassandra-myth-greek-elections">The Guardian</a></h6>

<p>According to Greek legend, Cassandra was a prophet. She foresaw terrible, tragic futures — but as if that wasn’t enough, she was also cursed to never be believed.</p>

<p>I had always wondered why on earth <a href="http://planetcassandra.org">Apache Cassandra</a> was named after a prophet who was never believed. Doesn’t give you the greatest confidence in their software, no?</p>

<p>But yesterday, I learned a ton about Cassandra from a knowledgeable coworker — and now, the reference to Greek legend makes sense.</p>

<h2>What is Cassandra?</h2>

<p>Cassandra is a distributed data management system built for handling large volumes of I/O with no single point of failure. With Cassandra, your database is just a file system, with files spread out over a number of nodes that are arranged in a cluster.</p>

<p><img class="[Cassandra]" src="http://bookstein.github.io/images/cassandra-ring.png" width="219" height="215" title="[Cassandra ring [Cassandra ring]]" ></p>

<h6>Image: PlanetCassandra.org</h6>

<h2>How is it different from MySQL?</h2>

<p>Relational databases like MySQL and Postgres use a binary tree structure to store information. Binary trees are great for reading information quickly — they&rsquo;re a data structure that accommodates binary search, dividing predictable/sortable information in half and search the new half for the desired row. However, adding new rows to a binary tree is kind of ugly. You add the new information as randomly-inserted leaf nodes in the tree and now your binary tree is out of order.</p>

<p>Cassandra solves this problem by getting rid of the binary tree and replacing it with a token ring. In a token ring, you start with a key (like “start time” or “id”) and generate a unique hashed key, an unsigned <code>Long</code> with a value somewhere between -2<sup>64</sup> and 2<sup>63</sup>. The ring is divided into chunks, each of which have a node assigned to it. For example, you might have a chunk of hashed keys assigned to Node 1, another chunk to Node 3, another chunk to Node 2, another chunk to Node 1, another chunk to Node 3, etc. The chunks are distributed in a somewhat random way to try to fairly balance the load — you wouldn’t want a bunch of traffic going to Node 1 and overwhelming it with requests.</p>

<p>But, just like the prophet from Greek legend, never believe Cassandra.</p>

<h2>Can’t trust Cassandra</h2>

<p>Any one node by itself can’t be trusted. In fact, the token ring doesn’t just assign one node to each chunk of hash keys, but a list of nodes in the order in which to try to write the data. For example: chunk 256 => [2,3,1]. This will try to write to Node 2 first, then 3, then 1. The data will be stored on multiple nodes eventually.</p>

<p>Every cluster has a replication factor, a value that determines how many nodes to repeat the data on. For example, if our 3-node cluster has a replication factor (RF) of 3, then data will be stored on all 3 of the nodes. My coworker strongly believes that 3 is the minimum sensible RF — because if any of your nodes ever goes down, then you’d rely on a backup node, and you’d need 1 more node to double-check to verify the data is good. (3 nodes - 1 node = 2 nodes. 1 node for requesting the data, 1 to double-check that the first one is right.)</p>

<p><img class="[Cassandra nodes]" src="http://bookstein.github.io/images/nodes.png" width="662" height="482" title="[Cassandra nodes [Cassandra nodes]]" ></p>

<h6>Image: <a href="https://www.hakkalabs.co/articles/how-cassandra-stores-data">HakkaLabs</a></h6>

<h2>Scalable system</h2>

<p>One thing that’s amazing about Cassandra is how easy it is to add a new node and therefore add capacity to a cluster. You add the provisioned server to the cluster by simply starting Cassandra on the server (it’s a Java app), then adding its IP address to the list of known nodes. The Cassandra node gets the schema information from the “seed” nodes (the seed nodes are just the nodes, listed by IP address, found in the Cassandra config under “seeds”), the token ring breaks and re-forms to include the new node, and the new node begins streaming data from older nodes. Once it’s joined the cluster and owns all the information it’s expected to own, then it’s ready to receive traffic, and you’ve just added a terabyte of available storage space to your database.</p>

<p>There are no masters, there are no replicas. Just nodes.</p>

<p>It’s a cool system. The co-op nerd side of me loves the hierarchy-free model based on negotiation, shared ownership, and consent among nodes.</p>

<p>However, there are some serious drawbacks to using Cassandra.</p>

<h2>What’s wrong with Cassandra?</h2>

<p>The biggest downside of Cassandra that has come up so far in conversation: it was designed to solve the problem of slow writes. When MySQL or Postgres write something new to a binary tree, that information gets spread out over the binary tree &ndash; it&rsquo;s not all in one place. Cassandra, on the other hand, writes new information all together. This is convenient when your model of storage is a spinning hard disk drive, where you&rsquo;d want all the writes to be together.</p>

<p>But with the advent of solid-state drives, this problem might feel a little irrelevant. And given that Cassandra requires a lot of specialized knowledge outside the comfort zone of people who understand SQL really well, there might not be enough of an incentive to make the switch &ndash; or to even stop using Cassandra after having started.</p>

<hr />

<h4>Sources:</h4>

<ul>
<li><a href="http://www.planetcassandra.org/what-is-apache-cassandra/">http://www.planetcassandra.org/what-is-apache-cassandra/</a></li>
<li><a href="https://www.hakkalabs.co/articles/how-cassandra-stores-data">https://www.hakkalabs.co/articles/how-cassandra-stores-data</a></li>
<li>My awesome coworker</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Going deeper with DNS]]></title>
    <link href="http://bookstein.github.io/blog/2016/08/24/going-deeper-with-dns/"/>
    <updated>2016-08-24T07:38:02-07:00</updated>
    <id>http://bookstein.github.io/blog/2016/08/24/going-deeper-with-dns</id>
    <content type="html"><![CDATA[<p>Sometimes you just need to say things out loud to someone else to know that you understand something. That&rsquo;s what I did with my coworker the other day &ndash; just described out loud to him how I thought our internal service worked. It really helped. I got to put my vague thoughts into words, and he offered corrections as needed.</p>

<p>Turns out that, like most things, our service works because of the magic that is the Internet. HTTP requests, DNS lookup, IP addresses, CORS, etc, are all at the core of how it functions. Trying to explain how the service worked reminded me of the code interview prep question I practiced when I was trying to get my first software job: &ldquo;Explain how the Internet works at a high level.&rdquo;</p>

<h3>The /etc/hosts hack</h3>

<p>DNS (Domain Name System) lookup is hierarchical. When you make a request for a domain like google.com, the request will travel up through a series of DNS servers until it finds an entry for google.com that points to a specific IP address.</p>

<p>From your laptop, the very first place your computer looks in that hierarchy chain is a file called <code>/etc/hosts</code>. It contains a list of domain names and IP addresses, just like any other DNS server. And so, if you put an entry like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>127.0.0.1   www.google.com</span></code></pre></td></tr></table></div></figure>


<p>then from now on, when you try to load google.com in your browser (unless your browser has a cached version), you will actually be directed to 127.0.0.1 &ndash; your own machine.</p>

<p>This is useful if you want to simulate, say, hitting an internal service that proxies your request to another app. Put the IP address of the internal service with the name of your app in your <code>/etc/hosts</code> file, and your computer will map the domain of the app to the real live internal service, located at that IP address, that receives the request and proxies it elsewhere.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># the internal service IP        the app
</span><span class='line'>55.5.555.55                      mycoolapp.mydomain.com</span></code></pre></td></tr></table></div></figure>


<h3>Who controls DNS?</h3>

<p>So besides just putting it in your <code>/etc/hosts</code> file, how do IP addresses end up with registered domain names?</p>

<p>when you buy a domain (like from Namecheap or Godaddy), those vendors work with <a href="http://www.iana.org/">IANA</a> to add your DNS entry &ndash; that&rsquo;s the department of <a href="https://en.wikipedia.org/wiki/ICANN">ICANN</a> that controls IP/DNS stuff. Yes, deep down in there, there&rsquo;s a bureaucracy (no offense, IANA) sitting inside the Internet, pulling the strings.</p>

<p>Companies may have their own DNS servers, too. Internal apps and services that don&rsquo;t need to be accessed by the public Internet can have IP addresses that don&rsquo;t need to be registered through IANA.</p>

<h3>Domain Name VS. Host VS. IP</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>55.5.555.55     mydata.com        # domain name
</span><span class='line'>55.5.555.55     wwww.mydata.com   # sub-domain</span></code></pre></td></tr></table></div></figure>


<p>It used to be the case that subdomains usually had their own unique IP address. Then we learned about <em>Reduce, Reuse, Recycle</em>. Now, it&rsquo;s common for any one IP address to have many subdomains. So how do we know where exactly to send the request?</p>

<p>Every HTTP request comes with a <code>Host</code> header. The Host header identifies the location &ndash; the actual host machine &ndash; to where we&rsquo;re sending packets. The host is the domain name of the server (as well as the port if a nonstandard port is being used). Getting close to the metal here!</p>

<p>Knowing the hostname and port, we can now send the request to the correct host at the IP address we looked up.</p>

<h3>In Summary: A Midsummer Night&rsquo;s Dream</h3>

<p><img class="[Thisbe]" src="http://bookstein.github.io/images/271px-John_William_Waterhouse_-_Thisbe,_1909.jpg" width="271" height="480" title="[Thisbe [painting of Thisbe]]" ></p>

<h6>Image: John William Waterhouse - Art Renewal Center – description, Public Domain, <a href="https://commons.wikimedia.org/w/index.php?curid=39913701">https://commons.wikimedia.org/w/index.php?curid=39913701</a></h6>

<p>Let&rsquo;s say you&rsquo;re making an internal service who receives requests from one lover, inserts some headers into the request, and proxies the request to its ultimate destination &ndash; then hands back the response. A go-between romantic messenger service.</p>

<p>Let&rsquo;s pull in some Shakespeare: your service is Wall, and your lovers are Pyramus and Thisbe.</p>

<p>Here is the information you need:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Wall: wall.service.com
</span><span class='line'>Pyramus: pyramus.mylove.org:8080
</span><span class='line'>Thisbe: thisbe.mydove.org:5000
</span><span class='line'>
</span><span class='line'>1.1.1.1 wall.service.com
</span><span class='line'>99.9.9.999 pyramus.mylove.org
</span><span class='line'>88.8.8.888 thisbe.mydove.org</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s put Pyramus behind the Wall. We&rsquo;ll need a DNS entry that looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1.1.1.1 pyramus.mylove.org</span></code></pre></td></tr></table></div></figure>


<p>Now, Thisbe sends an HTTP request to Pyramus with the domain name <code>wall.service.com</code> and the host header <code>pyramus.mylove.org:8080</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl 'wall.service.com' -H 'pyramus.mylove.org:8080'</span></code></pre></td></tr></table></div></figure>


<p>The Wall receives the request (because it&rsquo;s at <code>1.1.1.1</code>, the IP address that matches the domain), sees the host header, and passes the request on to Pyramus. Success! (Of course, there will be a response back to Thisbe too, but it&rsquo;s too saccharine to print here.)</p>

<p>Exeunt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello world]]></title>
    <link href="http://bookstein.github.io/blog/2016/08/23/hello-world/"/>
    <updated>2016-08-23T03:46:40-07:00</updated>
    <id>http://bookstein.github.io/blog/2016/08/23/hello-world</id>
    <content type="html"><![CDATA[<p>Almost a year and a half ago, on March 2, 2015, I started work as a software engineer. I was new to Portland, new to programming, and frankly, new to having any kind of foreseeable career path.</p>

<p>The first year was a rush: trying to learn as quickly as possible, trying to do well, trying not to fall behind. I set lots of goals for myself. Since I was working on a public REST API, my manager suggested that I learn as much about APIs as possible. Not only did I take that advice, but I started to veer my long-term career goals in the direction of becoming an API master. APIs are neat. They are symbolic of the Internet itself, showing how interconnection enables complexity and creativity. Pursuing that domain-specific knowledge, I focused on having a specialty &ndash; on being special.</p>

<p>From there it was easy to start playing the career ladder game. Can I get a promotion six months from now? What do I have to do to get there? I focused on promotion as a sign I was doing well, a sign that I was on the right track. I felt hugely validated (and, of course, sure that there was some mistake) when I was promoted to Software Engineer II a year in. I couldn&rsquo;t wait to jump right in and start wading towards III, then IV, then senior. I joined a small group of women specifically working on &ldquo;leveling up&rdquo; and kept adding to my list of goals.</p>

<p>Over the last several months, though, I got a wake-up call. Part of the wake-up call was that I changed jobs. The API team (me) was merged into another team, one that owned a bunch of internal services. I stopped driving towards API knowledge and Ruby/Grape expertise and scrambled to pick up Java. Now that I was no longer working full-time on a REST API, my goals around API mastery loosened their grip. When I was asked where I was trying to go long-term, I found that my desire to climb to the level of senior engineer as quickly as possible had also disappeared. Instead, I started wondering: why am I here? What motivates me? And I remembered promises I&rsquo;d made to myself back when I first embarked on the software engineering path. I remembered why I chose a tech career and how it fits into my life goals, not just my career plans.</p>

<p>It&rsquo;s been an interesting process to re-envision my nearer-term goals with respect to these larger life values. I&rsquo;m surprised by what has taken root so strongly: to really pursue work as a full-stack engineer. To be somebody who makes a point of being a generalist. I&rsquo;ve been a generalist all my life. Why switch to being a specialist now? The heck with &ldquo;Jack of all trades, master of none&rdquo; and the associated stigma. I&rsquo;ll be Jack. I like variety. Variety is useful.</p>

<p>I&rsquo;m starting this blog (in earnest this time!) to capture what I learn in the process of becoming a Jack of all trades. If I&rsquo;m going to gobble up knowledge involving React, Angular, Java, Kafka, Rails, Docker, Jenkins, and so much more, then I&rsquo;ll need a place to recompile and condense that information &ndash; and that&rsquo;s here.</p>
]]></content>
  </entry>
  
</feed>
